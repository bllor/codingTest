탐색 : 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
대표적인 탐색 알고리즘으로 DFS와 BFS를 꼽을 수 있다.
DFS와 BFS를 이해하려면 기본 자료구조인 스택과 큐를 이해할 수 있어야 한다.

1.스택
선입후출구조 또는 후입선출구조
가장 마지막에 넣은 것을 가장 먼저 뺀다.


2.큐
선입선출구조
가장 마지막에 넣은 것이 가장 마지막에 나온다.
파이썬에서 큐를 구현할 때는 collections 모듈에서 제공하는 deque 자료구조를 사용하자.


3.DFS(Depth-First Search)
그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
특정 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문한 후, 다시 돌아가 다른 경로로 탐색하는 알고리즘
[1]동작 과정
(1)탐색 시작 노드를 스택에 삽입하고 방문 처리한다.
(2)스택의 최상단 노드에 방문하지 않은 인접노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리한다.
   방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼낸다.
(3)2번과정을 더 이상 수행할 수 없을 때까지 반복한다.


4.BFS(Breadth First Search)
가까운 노드부터 탐색하는 알고리즘
bfs구현에서는 선입선출 방식인 큐 자료구조를 이용하는 것이 정석이다.
[1]동작 방식
1)탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다
2)큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노들 모두 큐에 삽입하고 방문처리를 한다
3)2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.



*
자료구조 : 데이터를 표현하고 관리하고 처리하기 위한 구조

*
프로그래밍에서 그래프를 표현하는 방법
1.인접행렬 : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
연결되지 않은 노드끼리는 무한의 비용이 든다.
2.인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식

[1]차이점
인접 행렬 방식은 모든 관계를 저장하므로 노드 개수가 많아질수록 메모리가 불필요하게 낭비된다.
인접 리스트 방식은 연결된 정보만은 저장하기 때문에 메모리를 효율적으로 사용한다.

인접 리스트 방식은 인접 행렬 방식에 비해 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.
특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우, 인접 리스트 방식이 인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.


ex)인접행렬
inf = 999

graph = [
    [0,7,5],
    [7,0,inf],
    [5,inf,0]
]
ex)
인접리스트
graph = [[]for _in range(3)]

노드 0에 연결된 노드 정보 저장
graph[0].append((1,7))
graph[0].append((2,5))

노드 1에 연결된 노드 정보 저장
graph[1].append((0,7))

노드 2에 연결된 노드 정보 저장
graph[2].append((0,5))
