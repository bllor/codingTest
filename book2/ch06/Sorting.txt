정렬 : 데이터를 특정한 기준에 따라서 순서대로 나열하는 것
정렬을 공부하면 알고리즘의 효율성을 쉽게 이해할 수 있다.

1.선택정렬
데이터가 무작위로 여러 개 있을 때, 이 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고,
그다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정
선택정렬의 시간복잡도는 O(N^2)이다.
직관적으로 이해하자면 소스코드 상으로 간단한 형태의 2중반복문이 사용되었다.

2.삽입정렬
데이터를 하나씩 확인하며, 각 데이터를 적절한 위치에 삽입하는 것
선택정렬에 비해 구현 난이도가 높은 편이지만 선택 정렬에 비해 실행 시간 측면에서 더 효율적인 알고리즘이다.
삽입정렬은 두 번째 데이터부터 시작한다. 왜냐하면 첫 번째 데이터는 그 자체로 정렬되어 있다고 판단하기 때문이다.
삽입정렬은 항상 오름차순을 유지하며 삽입될 데이터보다 작은 데이터를 만나면 그 위치에서 멈춘다.


3.퀵정렬(quick sort)
위의 정렬들 보다 더 많이 사용되는 알고리즘으로, 빠른 알고리즘이다.
퀵정렬과 병합정렬은 대부분의 프로그래밍 언어에서 정렬 라이브러리의 근간이 되는 알고리즘이다.
퀵 정렬은 기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작한다.
퀵 정렬에서는 큰 수와 작은 수를 교환할 때, 교환을 위한 기준인 피벗을 사용한다.
피벗 설정과 리스트 분할 방법에 따라 여러가지의 퀵정렬로 나뉘는데 이 책에서는 호어 분할 방법을 사용한다.
퀵정렬의 시간 복잡도는 O(NlogN)이다.

4.계수정렬(count sort)
데이터의 크기 범위가 제한되어 정수형태로 표현할 수 있을 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘이다.
일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1000000을 넘지 않을 때 효과적으로 사용할 수 있다.
계수 정렬이 이러한 특징을 가지는 이유는 계수 정렬을 이용할 때는 모든 범위를 담을 수 있는 크기의 리스트를 선언해야하기 때문이다.
계수정렬은 먼저 가장 큰 데이터와 가장 작은 데이터의 범위가 모두 담길 수 있도록 하나의 리스트를 생성한다.
그 다음 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시키면 계수정렬이 완료된다.
정렬된 결과는 인덱스값*데이터수로 출력된다.
예를 들어 0이 2번, 1이 1번,2가 3번 나왔다고 했을 때 출력값은 001222이다.
계수 정렬의 시간복잡도는 모든 데이터가 양의 정수인 상황에서 데이터의 개수를 N, 데이터 중 최대값의 크기를 K라고 할 때 O(N+K)이다.


5.정렬 라이브러리
파이썬은 기본 정렬 라이브러리인 sorted()함수를 제공한다.
sorted()는 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 만들어졌는데, 병합 정렬은 일반적으로 퀵정렬보다 느리지만
최악의 겨우에도 시간 복잡도 O(NlogN)을 보장한다는 특징이 있다.
리스트 변수가 하나 있을 때 내부 원소를 바로 정렬할 수 있다.리스트 객체의 내장 함수인 sort()를 이용하는 것인데,
이를 이용하면 별도의 정렬된 리스트가 반환되지 않고 내부 원소가 바로 정렬된다.
sorted()나 sort()를 이용할 때에는 key 매개변수를 입력으로 받을 수 있다.


